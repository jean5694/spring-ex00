<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="org.zerock.mapper.Test2Mapper">

<!-- 쿼리를 동적으로 완성하는 방법 p.329 -->
	
	<select id="sql1" resultType="int">
		SELECT count(*) FROM tbl_board WHERE writer = #{t}
	</select>


<!-- if 태그 -->
	<select id="sql2" resultType="int" >
		<if test='type == "a"'>
			SELECT 1
		</if>
		<if test='type == "b"'>
			SELECT 2
		</if>
	</select>
<!-- 
1. if를 사용하게 되면 test에 적어둔 대로 조건에 따라 다른 쿼리가 실행됨
2. string을 쓰려면 큰따옴표("")를 사용해야 하기 때문에 코드를 감싸는 따옴표는 작은 따옴표('')를 사용할 것
 -->	


	<select id="sql3" resultType="int">
		SELECT count(*) FROM tbl_board
		WHERE
		<if test='type == "a"'>
			writer = 'user00'
		</if>

		<if test='type == "b"'>
			content = 'javajava'
		</if>		
	</select>
<!-- 
3. where절 안에 <if>태그를 사용한 조건식
3-1. if 태그에 없는 조건을 사용할 경우, where절에서 코드가 끊겨 진행되지 않음
	이렇게 끊기지 않게 하기 위해선 sql4번 참고
 -->	



 	<select id="sql4" resultType="int">
		SELECT count(*) FROM tbl_board
		<where>
			<if test='type == "a"'>
				writer = 'user00'
			</if>

			<if test='type == "b"'>
				content = 'javajava'
			</if>		
		</where>		
	</select>

<!-- 
4. where 자체를 elem로써 사용해 태그로 감싸줄 것
4-1. <where> 엘리먼트를 사용하면
	<if> 태그에 해당하지 않는 조건이 사용될 때, 에러가 생기지 않고
	<where> 엘리먼트 직전에 적힌 공통된 쿼리로 정상 실행됨
 -->	
 

<!-- choose 태그 -->
	<select id="sql5" resultType="int">
		SELECT count(*) FROM tbl_board
		<where>
			<choose>
				<when test='type == "a"'>
					writer = 'user00'
				</when>
				<when test='type == "b"'>
					content = 'javajava'
				</when>	
				<otherwise>
					title = 'abcdef'
				</otherwise>	
			</choose>
		</where>		
	</select>	
<!-- 
5. <choose> 태그는 <if> 태그와 달리 여러 상황들 중 하나의 상황에서만 동작함 
5-1. <otherwise> 태그는 모든 위의 모든 조건이 충족되지 않을 경우에 사용함
 -->	
	
	
<!-- foreach, trim 태그 -->	
	<select id="sql6" resultType="int">

	SELECT COUNT(*) FROM tbl_board

	WHERE writer IN (

		<trim suffixOverrides=",">
			<foreach item="wr" collection="list">
				#{wr} ,
			</foreach>
		</trim>
	);
	</select>
<!-- 
6. foreach 태그는 List, 배열, 맵 등을 이용해서 반복되는 루프를 처리할 때 사용함
6-1. 주로 IN 조건에서 많이 사용하지만, 경우에 따라서 복잡한 WHERE 조건을 만들때에도 사용할 수 있음
6-2. collection : 사용하려는 파라미터
6-3. item : foreach 내부에서 사용하려는 파라미터 명 
			-> list로 받아온 파라미터를 foreach 내부에서 wr이라는 명칭으로 사용한다
6-4. #{wr} ,  : foreach 태그 내에 존재하기 때문에 '#{wr} ,' 형태로 list의 갯수만큼 계속 반복된다

7. trim 요소는 앞, 뒤로 특정한 키워드를 추가하거나 지워주는 역할
7-1. trim 속성 : prefix, suffix, prefixOverrides, suffixOverrides 
7-2. <trim suffixOverrides=","> : 끝이 ","로 끝나면 삭제해주겠다는 의미

 -->
 
 	<select id="sql7" resultType="int">
		SELECT COUNT(*) FROM tbl_board
		WHERE

		writer IN (
		<foreach item="item" separator="," collection="list">
			#{item}
		</foreach>
		)
	</select>
<!-- 
* sql6과 차이점
<separator>를 사용함으로써 배열 사이에 구분자를 넣어주어 trim 태그를 따로 사용하지 않아도 됨
 -->
</mapper> 